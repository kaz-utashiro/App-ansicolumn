#!/usr/bin/env perl

use v5.14;
use warnings;

use App::ansicolumn;

App::ansicolumn->new->run(@ARGV);

__END__

=encoding utf-8

=head1 NAME

ansicolumn - ANSI terminal sequence aware column command

=head1 VERSION

Version 0.08

=head1 SYNOPSIS

ansicolumn [-tx] [-c columns] [-s sep] [file ...]

=head1 DESCRIPTION

B<ansicolumn> is a L<column(1)> command clone which can handle ANSI
terminal sequences.

From L<column(1)>:

=over 4

The column utility formats its input into multiple columns.  Rows are
filled before columns.  Input is taken from file operands, or, by
default, from the standard input.  Empty lines are ignored.

=over 7

=item B<-c> #

Output is formatted for a display columns wide.

=item B<-s> #

Specify a set of characters to be used to delimit columns for the
-t option.

=item B<-t>

Determine the number of columns the input contains and create a
table.  Columns are delimited with whitespace, by default, or
with the characters supplied using the -s option.  Useful for
pretty-printing displays.

=item B<-x>

Fill columns before filling rows.

=back

=back


Some addtional options are compatible with Linux extended version.

=over 4

=over 7

=item B<--output-width>=#, B<-c>#

Long name for B<-c>.

=item B<--separator>=#, B<-s>#

Long name for B<-s>.

=item B<--table>, B<-t>

Long name for B<-t>.

=item B<--fillrows>, B<-x>

Long name for B<-x>.

=item B<--output-separator>=#, B<-o>#

When used B<--table> or B<-t> option, each columns are joind by two
space characters (' ') by defualt.  This option will change it.

=item B<--table-right>=I<columns>, B<-R>I<columns>

Right align text in these columns.
Support only numbers.

=back

=back

Some options are original.

=over 4

=over 7

=item B<--tabstop>=#

Set tab width.

=item B<--columnunit>=#

Each columns are placed at unit of 8 by default.  This option changes
the number of unit.

=item B<--fullwidth>

Use full width of the terminal.  Each panes are expanded to fill
terminal width, unless B<--pane-width> is specified.

=item B<--pane>=#, B<-C>#

Output is formatted in the specified number of panes.  Setting number
of panes implies -B<--fullwidth> option enabled.

=item B<--pane-width>=#, B<--pw>=#, B<-S>#

Specify pane width.  This includes B<--prefix> and B<--postfix>
spaces.

=item B<--pagelength>=#

Set page length and page mode on.

=item B<--page>, B<-P>

Page mode.  Set B<--pagelength> to terminal height - 1, and set
B<--linestyle> as B<wrap>.

=item B<--document>, B<-D>

Document mode.  Set following options.

    --fullwidth
    --linebreak=all
    --linestyle=wrap
    --boundary=word
    --postfix=' '

Next command display DOCX text in 3-up format using
L<App::optex::textconv>.

    optex -Mtextconv ansicolumn -DPC3 foo.docx | less

=item B<-->[B<no->]B<ignore-space>, B<-->[B<no->]B<is>

When used B<-t> option, leading spaces are ignored by default.  Use
B<--no-ignore-space> option to disable it.

=item B<--linestyle>=I<none>|I<truncate>|I<wrap>|I<wordwrap>, B<--ls>=I<...>

Set the style of treatment for longer lines.
Default is I<none>.

=begin comment

=item B<--boundary>=I<word>

Set text wrap boundary.

=end comment

=item B<--linebreak>=I<none|all|runin|runout>

Set the linebreak mode.

=item B<--prefix>=I<string>, B<--postfix>=I<string>

Set prefix and postfix appended to each data.  Prefix is empty and
postfix is single space, by default.

=item B<--runin>=#, B<--runout>=#

Set number of runin/runout column.
Default is both 4.

=back

=back

=head1 INSTALL

=head2 CPANMINUS

    $ cpanm App::Greple
    or
    $ curl -sL http://cpanmin.us | perl - App::ansicolumn

=head1 SEE ALSO

L<column(1)>

L<App::ansicolumn>,
L<https://github.com/kaz-utashiro/App-ansicolumn>

L<Text::ANSI::Printf>,
L<https://github.com/kaz-utashiro/Text-ANSI-Printf>

=head1 AUTHOR

Kazumasa Utashiro

=head1 LICENSE

Copyright 2020 Kazumasa Utashiro.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
