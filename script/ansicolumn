#!/usr/bin/env perl

use v5.14;
use warnings;

use App::ansicolumn;

App::ansicolumn->new->run(@ARGV);

__END__

=encoding utf-8

=head1 NAME

ansicolumn - ANSI terminal sequence aware column command

=head1 VERSION

Version 0.13

=head1 SYNOPSIS

ansicolumn [-tx] [-c columns] [-s sep] [file ...]

=head1 DESCRIPTION

B<ansicolumn> is a L<column(1)> command clone which can handle ANSI
terminal sequences.

From L<column(1)>:

=over 4

The column utility formats its input into multiple columns.  Rows are
filled before columns.  Input is taken from file operands, or, by
default, from the standard input.  Empty lines are ignored.

=over 7

=item B<-c> #

Output is formatted for a display columns wide.

=item B<-s> #

Specify a set of characters to be used to delimit columns for the
-t option.

=item B<-t>

Determine the number of columns the input contains and create a
table.  Columns are delimited with whitespace, by default, or
with the characters supplied using the -s option.  Useful for
pretty-printing displays.

=item B<-x>

Fill columns before filling rows.

=back

=back


Some additional options are compatible with Linux extended version.

=over 4

=over 7

=item B<-c>#, B<--output-width>=#

Long name for B<-c>.

=item B<-s>#, B<--separator>=#

Long name for B<-s>.

=item B<-t>, B<--table>

Long name for B<-t>.

=item B<-x>, B<--fillrows>

Long name for B<-x>.

=item B<-o>#, B<--output-separator>=#

When used B<--table> or B<-t> option, each columns are joined by two
space characters (' ') by default.  This option will change it.

=item B<-R>I<columns>, B<--table-right>=I<columns>

Right align text in these columns.
Support only numbers.

=back

=back

Some options are original.

=over 4

=over 7

=item B<--tabstop>=#

Set tab width.

=item B<--columnunit>=#

Each columns are placed at unit of 8 by default.  This option changes
the number of unit.

=item B<--fullwidth>

Use full width of the terminal.  Each panes are expanded to fill
terminal width, unless B<--pane-width> is specified.

=item B<-C>#, B<--pane>=#

Output is formatted in the specified number of panes.  Setting number
of panes implies B<--fullwidth> option enabled.

=item B<-S>#, B<--pane-width>=#, B<--pw>=#

Specify pane width.  This includes border spaces.

=item B<--page-height>=#, B<--ph>=#

Set page height and page mode on.

=item B<-P>, B<--page>

Page mode.  Set following options.

    --page-height=[ terminal height - 1 ]
    --linestyle=wrap
    --border

=item B<-D>, B<--document>

Document mode.  Set following options.

    --fullwidth
    --linebreak=all
    --linestyle=wrap
    --boundary=word

Next command display DOCX text in 3-up format using
L<App::optex::textconv>.

    optex -Mtextconv ansicolumn -DPC3 foo.docx | less

=item B<-->[B<no->]B<ignore-space>, B<-->[B<no->]B<is>

When used B<-t> option, leading spaces are ignored by default.  Use
B<--no-ignore-space> option to disable it.

=item B<--linestyle>=I<none>|I<truncate>|I<wrap>|I<wordwrap>, B<--ls>=I<...>

Set the style of treatment for longer lines.
Default is I<none>.

=item B<--boundary>=I<word>

Set text wrap boundary.  If this option set to B<word>, text is
wrapped at word boundary.  Option B<--document> set this automatically.
Use something like `--boundary=none' to disable it.

=item B<--linebreak>=I<none|all|runin|runout>, B<--lb>=...

Set the linebreak mode.

=item B<--runin>=#, B<--runout>=#

Set number of runin/runout column.
Default is both 2.

=item B<-->[B<no->]B<border>

Print border.  Enabled by B<--page> option automatically.  Use
B<--no-border> to disable it.  Border theme is specified by
B<--border-theme> option.

=item B<--border-theme>=I<theme>

Set column border theme.  Default theme is B<light-bar>, which is
light vertical line filling the page height.  My favorite is
B<light-block>.  These themes are experimental and subject to change.
Use `perldoc -m App::ansicolumn::Border` for detail.

=item B<--insert-space>

Insert empty line between every successive non-empty lines.

=item B<--no-top-space>

Clean up empty lines at the top of each pages.

=item B<--ambiguous>=I<width_spec>

Specifies how to treat Unicode ambiguous width characters.  Take a
value of 'narrow' or 'wide.  Default is 'narrow'.

=back

=back

=head1 INSTALL

=head2 CPANMINUS

    $ cpanm App::Greple
    or
    $ curl -sL http://cpanmin.us | perl - App::ansicolumn

Until CPAN release, use this:

    $ cpanm https://github.com/kaz-utashiro/App-ansicolumn.git

=head1 SEE ALSO

L<column(1)>

L<App::ansicolumn>,
L<https://github.com/kaz-utashiro/App-ansicolumn>

L<Text::ANSI::Printf>,
L<https://github.com/kaz-utashiro/Text-ANSI-Printf>

=head1 AUTHOR

Kazumasa Utashiro

=head1 LICENSE

Copyright 2020 Kazumasa Utashiro.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

#  LocalWords:  ansicolumn fillrows tabstop columnunit fullwidth DOCX
#  LocalWords:  linestyle linebreak docx runin runout perldoc cpanm
#  LocalWords:  CPANMINUS perl CPAN Kazumasa Utashiro
